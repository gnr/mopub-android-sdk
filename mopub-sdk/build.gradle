// This buildscript will assemble the MoPub SDK into an AAR.

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.google.com' }
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.2"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://maven.google.com' }
    flatDir {
         dirs '../libs'
    }
}

configurations {
    javadocDeps
}

apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

group = 'com.mopub'
description = '''MoPub Android SDK'''
version = '4.7.1'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"
    lintOptions { abortOnError false }
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        versionCode 42
        versionName version
        minSdkVersion 16
        targetSdkVersion 30
        consumerProguardFiles 'proguard.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    testOptions {
        unitTests {
            // This causes android platform methods from the test JAR
            // to return null, false, etc instead of throwing an exception.
            // We should periodically disable this and tackle the broken tests
            // as it exposes when we are hitting platform APIs in our tests.
            // If these tests *require* platform APIs we may want to make them
            // connected tests instead.
            returnDefaultValues = true

            // Test JVM settings since we have a lot of classes loaded.
            all {
                jvmArgs '-XX:MaxPermSize=4096m', '-Xmx8192m'
                forkEvery 200
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
        }
      
        debug {
            minifyEnabled false
        }

        debugProguard {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard.txt')
        }
    }
}


dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    api fileTree(dir: 'libs', include: 'amazon-ads-5.9.0.jar')
    implementation 'com.mopub.volley:mopub-volley:1.1.0'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.11.5'
    implementation 'com.google.android.exoplayer:exoplayer-hls:2.11.5'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.11.5'
    // anchor: additional dependencies
}

def siteUrl = 'https://github.com/mopub/mopub-android-sdk'
def gitUrl = 'https://github.com/mopub/mopub-android-sdk.git'
// Put your credentials (bintray.user, bintray.apikey) in ~/.gradle/gradle.properties
bintray {
    user = project.hasProperty("bintray.user") ? project.getProperty("bintray.user") : ""
    key = project.hasProperty("bintray.apikey") ? project.getProperty("bintray.apikey") : ""

    configurations = ['archives']
    publish = true

    pkg {
        repo = 'mopub-android-sdk'
        name = 'mopub-android-sdk'

        userOrg = 'mopub'
        desc = description

        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']

        version {
            name = project.version
        }
    }
}

//install {
//    repositories.mavenInstaller {
//        pom {
//            project {
//                packaging 'aar'
//
//                name 'MoPub Android SDK'
//                url siteUrl
//
//                licenses {
//                    license {
//                        name 'MoPub SDK License'
//                        url 'http://www.mopub.com/legal/sdk-license-agreement/'
//                    }
//                }
//                developers {
//                    // ID corresponds to GitHub user name
//                    developer {
//                        id 'nathanshayefar'
//                        name 'Nathan Shayefar'
//                        email 'nshayefar@twitter.com'
//                    }
//                    developer {
//                        id 'joeblubaugh'
//                        name 'Joe Blubaugh'
//                        email 'joeblubaugh@twitter.com'
//                    }
//                    developer {
//                        id 'steffanc'
//                        name 'Steffan Chartrand'
//                        email 'schartrand@twitter.com'
//                    }
//                    developer {
//                        id 'aornelas'
//                        name 'Andr√©s Ornelas'
//                        email 'andres@twitter.com'
//                    }
//                    developer {
//                        id 'bichenwang'
//                        name 'Bichen Wang'
//                        email 'bwang@twitter.com'
//                    }
//                    developer {
//                        id 'nathank33'
//                        name 'Nathan Braun'
//                        email 'nbraun@twitter.com'
//                    }
//                }
//                scm {
//                    connection gitUrl
//                    developerConnection gitUrl
//                    url siteUrl
//                }
//            }
//        }
//    }
//}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
